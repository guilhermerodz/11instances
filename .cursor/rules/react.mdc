---
description: React best practices
globs: *.tsx
---
Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

React:
- When importing a feature directly from the library "react", always import React fully. Examples: prefer `import React from "react"` over `import { useState } from React`, then use it as syntax `React.useState`.
- Use functional components with TypeScript interfaces.

Tailwind for JSX/TSX:
- When conditionally concatenating multiple Tailwind classes, use a utility called `cn` to concat like `className={cn("flex flex-col", isDragging & "shadow-lg")}` instead of 'className={`flex flex-col ${isDragging ? "shadow-lg" : ""}`}'.
- When writing `cn` to concat classes, prefer using a syntax like `cn(isDragging && "shadow-lg")` instead of object-mapping like `cn({ isDragging: "shadow-lg" })`.

CSS/Tailwind conventions:
- Instead of specifying transition shorthand for "all" properties, specify each of them individually. Example on CSS: `transition: opacity 1s, transform 2s;`. Example on Tailwind: `transition-opacity transition-transform`.

Next.js:
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Follow Next.js docs for Data Fetching, Rendering, and Routing.